import logging
import asyncio
import os
import requests
import time
from threading import Thread
from background import keep_alive
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, FSInputFile, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from PIL import Image

user_choice = {}  # –•—Ä–∞–Ω–∏—Ç —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (size –∏–ª–∏ opacity)
user_opacity = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_size = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤
translations = {
    "start": {
        "ru": "–ü—Ä–∏–≤–µ—Ç! üòä\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. üî•\n\nüìå –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?\nüìé –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–ª–∏ –ª–æ–≥–æ—Ç–∏–ø–æ–º, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞.\n\n‚ö† –í–∞–∂–Ω–æ! –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–º, –∞ –Ω–µ –∫–∞–∫ —Å–∂–∞—Ç–æ–µ —Ñ–æ—Ç–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–æ –∏–º–µ–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–º–µ—Ä –∏ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ) –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω.\n\n–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏–µ, —Ä–∞–∑–º–µ—Ä –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫. üòä üöÄ",
        "en": "Hello! Send me a logo (JPG or PNG).",
        "uk": "–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –ª–æ–≥–æ—Ç–∏–ø (JPG –∞–±–æ PNG)."
    },
    "menu": {
        "ru": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        "en": "Choose an action:",
        "uk": "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    },
    "choose_language": {
        "ru": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "en": "Choose a language:",
        "uk": "–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:"
    },
    "language_selected": {
        "ru": "‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –†—É—Å—Å–∫–∏–π.",
        "en": "‚úÖ You have selected English.",
        "uk": "‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –£–∫—Ä–∞—ó–Ω—Å—å–∫—É."
    },
    "logo_deleted": {
        "ru": "‚úÖ –í–∞—à –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ —É–¥–∞–ª—ë–Ω.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫. üòä üöÄ",
        "en": "‚úÖ Your logo has been deleted. Send a new logo.",
        "uk": "‚úÖ –í–∞—à –ª–æ–≥–æ—Ç–∏–ø –≤–∏–¥–∞–ª–µ–Ω–æ. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π –ª–æ–≥–æ—Ç–∏–ø."
    },
    "unsupported_format": {
        "ru": "‚ö† –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç—ã JPG –∏ PNG!",
        "en": "‚ö† Only JPG and PNG formats are supported!",
        "uk": "‚ö† –ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è –ª–∏—à–µ —Ñ–æ—Ä–º–∞—Ç–∏ JPG —ñ PNG!"
    },
    "logo_saved": {
        "ru": "‚úÖ –õ–æ–≥–æ—Ç–∏–ø ({}) —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞.",
        "en": "‚úÖ Logo ({}) saved! Now send a photo for the watermark.",
        "uk": "‚úÖ –õ–æ–≥–æ—Ç–∏–ø ({}) –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞."
    },
    "logo_saved_jpg": {
        "ru": "‚úÖ –õ–æ–≥–æ—Ç–∏–ø (JPG) —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞.",
        "en": "‚úÖ Logo (JPG) saved! Now send a photo for the watermark.",
        "uk": "‚úÖ –õ–æ–≥–æ—Ç–∏–ø (JPG) –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞."
    },
    "png_warning": {
        "ru": "‚ö† –ï—Å–ª–∏ —É –≤–∞—Å PNG —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é, –∑–∞–≥—Ä—É–∂–∞–π—Ç–µ –µ–≥–æ –∫–∞–∫ –§–ê–ô–õ (üìé), –∏–Ω–∞—á–µ —Ñ–æ–Ω —Å—Ç–∞–Ω–µ—Ç –±–µ–ª—ã–º!",
        "en": "‚ö† If you have a PNG with transparency, upload it as a FILE (üìé), otherwise the background will turn white!",
        "uk": "‚ö† –Ø–∫—â–æ —É –≤–∞—Å PNG –∑ –ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—é, –∑–∞–≤–∞–Ω—Ç–∞–∂—É–π—Ç–µ –π–æ–≥–æ —è–∫ –§–ê–ô–õ (üìé), —ñ–Ω–∞–∫—à–µ —Ñ–æ–Ω —Å—Ç–∞–Ω–µ –±—ñ–ª–∏–º!"
    },
    "upload_logo_first": {
        "ru": "‚ö† –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ª–æ–≥–æ—Ç–∏–ø (JPG –∏–ª–∏ PNG)!",
        "en": "‚ö† First, upload a logo (JPG or PNG)!",
        "uk": "‚ö† –°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –ª–æ–≥–æ—Ç–∏–ø (JPG –∞–±–æ PNG)!"
    },
    "unsupported_image_format": {
        "ru": "‚ö† –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ JPG –∏ PNG!",
        "en": "‚ö† Only JPG and PNG formats are supported!",
        "uk": "‚ö† –ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è –ª–∏—à–µ —Ñ–æ—Ä–º–∞—Ç–∏ JPG —ñ PNG!"
    },
    "watermark_added": {
        "ru": "‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –¥–æ–±–∞–≤–ª–µ–Ω.",
        "en": "‚úÖ Done! Watermark added.",
        "uk": "‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ–¥—è–Ω–∏–π –∑–Ω–∞–∫ –¥–æ–¥–∞–Ω–æ."
    },
    "unsupported_format": {
        "ru": "‚ùå –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG –∏–ª–∏ PNG.",
    },
    "logo_saved": {
        "ru": "‚úÖ –í–∞—à –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ {}.\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\nüîπ –£–¥–∞–ª–∏—Ç—å –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ ‚Äì –µ—Å–ª–∏ –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω.\nüîπ –í—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ ‚Äì —É–∫–∞–∂–∏—Ç–µ, –∫—É–¥–∞ –µ–≥–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å.\nüîπ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å ‚Äì —Å–¥–µ–ª–∞–π—Ç–µ –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–º –∏–ª–∏ –Ω–µ–∑–∞–º–µ—Ç–Ω—ã–º.\nüîπ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ ‚Äì —É–≤–µ–ª–∏—á—å—Ç–µ –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ –µ–≥–æ –ø–æ–¥ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\n–¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –Ω–∞–ª–æ–∂–∏—Ç—å –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ üöÄ",
    },
    "photo_not_allowed": {
        "ru": "‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ —á–µ—Ä–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞!",
    },
    "please_upload_file": {
        "ru": "üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞.",
    },

}

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = '8051188195:AAF69e5tHSU80MR2YBTD0eaNM7Eq5wQ-xf0'

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
processing_lock = asyncio.Lock()
# –ü–∞–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
IMAGE_DIR = "images"
WATERMARK_DIR = "watermarks"
os.makedirs(IMAGE_DIR, exist_ok=True)
os.makedirs(WATERMARK_DIR, exist_ok=True)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: "—Å–ø—Ä–∞–≤–∞" (–Ω–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª)
watermark_positions = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_languages = {}

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫"), KeyboardButton(text="üîç –í—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞")],
        [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏"), KeyboardButton(text="üìè –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞")],
        #[KeyboardButton(text="üåç –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫")]
    ],
    resize_keyboard=True
)
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
size_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="10%"), KeyboardButton(text="20%"), KeyboardButton(text="30%")],
        [KeyboardButton(text="40%"), KeyboardButton(text="50%"), KeyboardButton(text="60%")],
        [KeyboardButton(text="70%"), KeyboardButton(text="80%"), KeyboardButton(text="90%")],
        [KeyboardButton(text="100%")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]  # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
    ],
    resize_keyboard=True
)






# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
position_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="—Å–ª–µ–≤–∞ –≤–≤–µ—Ä—Ö—É"), KeyboardButton(text="–≤–≤–µ—Ä—Ö—É"), KeyboardButton(text="—Å–ø—Ä–∞–≤–∞ –≤–≤–µ—Ä—Ö—É")],
        [KeyboardButton(text="—Å–ª–µ–≤–∞"), KeyboardButton(text="–ø–æ —Ü–µ–Ω—Ç—Ä—É"), KeyboardButton(text="—Å–ø—Ä–∞–≤–∞"),],
        [KeyboardButton(text="—Å–ª–µ–≤–∞ –≤–Ω–∏–∑—É"), KeyboardButton(text="–≤–Ω–∏–∑—É"), KeyboardButton(text="—Å–ø–∞—Ä–∞–≤–∞ –≤–Ω–∏–∑—É")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]  # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
    ],
    resize_keyboard=True
)

opacity_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="10%"), KeyboardButton(text="20%"), KeyboardButton(text="30%")],
        [KeyboardButton(text="40%"), KeyboardButton(text="50%"), KeyboardButton(text="60%")],
        [KeyboardButton(text="70%"), KeyboardButton(text="80%"), KeyboardButton(text="90%")],
        [KeyboardButton(text="100%")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]  # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
    ],
    resize_keyboard=True
)
@dp.message(lambda message: message.text == "üìè –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞")
async def choose_size(message: types.Message):
    user_id = message.from_user.id
    user_choice[user_id] = "size"  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞:", reply_markup=size_keyboard)


@dp.message(lambda message: message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏")
async def choose_opacity(message: types.Message):
    user_id = message.from_user.id
    user_choice[user_id] = "opacity"  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω—è–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏:", reply_markup=opacity_keyboard)


@dp.message(lambda message: message.text and message.text.rstrip('%').isdigit())
async def handle_percentage(message: types.Message):
    user_id = message.from_user.id
    percent = int(message.text.rstrip('%'))

    if 0 <= percent <= 100:
        if user_id in user_choice:
            if user_choice[user_id] == "size":
                user_size[user_id] = percent / 100.0
                await message.answer(f"‚úÖ –†–∞–∑–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {percent}%\n\n–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –Ω–∞–ª–æ–∂–∏—Ç—å –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ üöÄ", reply_markup=menu_keyboard)
            elif user_choice[user_id] == "opacity":
                user_opacity[user_id] = percent / 100.0
                await message.answer(f"‚úÖ –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {percent}%\n\n–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –Ω–∞–ª–æ–∂–∏—Ç—å –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ üöÄ", reply_markup=menu_keyboard)

            del user_choice[user_id]  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è
        else:
            await message.answer("–û—à–∏–±–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä (—Ä–∞–∑–º–µ—Ä –∏–ª–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å).")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0% –¥–æ 100%.")






# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏




@dp.message(lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_menu(message: types.Message):
    await message.answer("‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=menu_keyboard)  # –¢–æ—á–∫–∞, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø—É—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
language_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üá¨üáß English")],
        [KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π")],
        [KeyboardButton(text="üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞")]
    ],
    resize_keyboard=True
)

@dp.message(lambda message: message.text in ["üá¨üáß English", "üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"])
async def set_language(message: Message):
    user_id = message.from_user.id

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ –∫–Ω–æ–ø–∫–µ
    if message.text == "üá∑üá∫ –†—É—Å—Å–∫–∏–π":
        user_languages[user_id] = "ru"
    elif message.text == "üá¨üáß English":
        user_languages[user_id] = "en"
    elif message.text == "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞":
        user_languages[user_id] = "uk"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
    lang = user_languages[user_id]
    await message.answer(translations["language_selected"][lang], reply_markup=menu_keyboard)


@dp.message(lambda message: message.text == "üåç –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫")
async def choose_language(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=language_keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_cmd(message: Message):
    user_id = message.from_user.id
    lang = user_languages.get(user_id, "ru")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
    await message.answer(translations["start"][lang], reply_markup=menu_keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /menu
@dp.message(Command("menu"))
async def menu_cmd(message: Message):
    user_id = message.from_user.id
    lang = user_languages.get(user_id, "ru")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
    await message.answer(translations["menu"][lang], reply_markup=menu_keyboard)

# –£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞
@dp.message(lambda message: message.text == "üóë –£–¥–∞–ª–∏—Ç—å –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫")
async def delete_logo(message: Message):
    user_id = message.from_user.id
    lang = user_languages.get(user_id, "ru")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π

    watermark_path_jpg = os.path.join(WATERMARK_DIR, f"{user_id}.jpg")
    watermark_path_png = os.path.join(WATERMARK_DIR, f"{user_id}.png")

    if os.path.exists(watermark_path_jpg):
        os.remove(watermark_path_jpg)
    if os.path.exists(watermark_path_png):
        os.remove(watermark_path_png)

    await message.answer(translations["logo_deleted"][lang], reply_markup=menu_keyboard)


# –í—ã–±–æ—Ä –º–µ—Å—Ç–∞ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
@dp.message(lambda message: message.text == "üîç –í—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞")
async def choose_position(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞:", reply_markup=position_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
@dp.message(lambda message: message.text in ["—Å–ª–µ–≤–∞ –≤–Ω–∏–∑—É", "—Å–ø–∞—Ä–∞–≤–∞ –≤–Ω–∏–∑—É", "—Å–ª–µ–≤–∞ –≤–≤–µ—Ä—Ö—É", "—Å–ø—Ä–∞–≤–∞ –≤–≤–µ—Ä—Ö—É", "—Å–ª–µ–≤–∞", "—Å–ø—Ä–∞–≤–∞", "–≤–≤–µ—Ä—Ö—É", "–≤–Ω–∏–∑—É", "–ø–æ —Ü–µ–Ω—Ç—Ä—É"])
async def set_position(message: Message):
    user_id = message.from_user.id
    watermark_positions[user_id] = message.text
    await message.answer(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {message.text}.\n\n–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –Ω–∞–ª–æ–∂–∏—Ç—å –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ üöÄ", reply_markup=menu_keyboard)

































# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤
WATERMARK_DIR = "watermarks"
os.makedirs(WATERMARK_DIR, exist_ok=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞
def has_logo(user_id):
    for ext in ["jpg", "jpeg", "png"]:
        if os.path.exists(os.path.join(WATERMARK_DIR, f"{user_id}.{ext}")):
            return True
    return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤
@dp.message(lambda message: message.document and not has_logo(message.from_user.id))
async def handle_document(message: Message):
    user_id = message.from_user.id
    document = message.document

    if not document:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    lang = user_languages.get(user_id, "ru")
    file_name = document.file_name or "unknown"
    file_ext = file_name.split('.')[-1].lower()

    if file_ext not in ["jpg", "png"]:
        await message.answer(translations["unsupported_format"][lang])
        return

    file = await bot.get_file(document.file_id)
    if not file or not file.file_path:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª.")
        return

    watermark_path = os.path.join(WATERMARK_DIR, f"{user_id}.{file_ext}")
    await bot.download_file(file.file_path, watermark_path)
    await message.answer(translations["logo_saved"][lang].format(file_ext.upper()))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ—Ç–∏–ø–æ–≤)
@dp.message(lambda message: message.photo and not has_logo(message.from_user.id))
async def handle_photo_logo(message: Message):
    user_id = message.from_user.id
    lang = user_languages.get(user_id, "ru")

    await message.answer(translations["photo_not_allowed"][lang])
    await message.answer(translations["please_upload_file"][lang])


@dp.message(lambda message: message.photo or (message.document and message.document.mime_type.startswith("image/")))
async def handle_image(message: Message):
    user_id = message.from_user.id
    lang = user_languages.get(user_id, "ru")  # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    async with processing_lock:  # –ë–ª–æ–∫–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–æ–≥–æ—Ç–∏–ø
        watermark_path = os.path.join(WATERMARK_DIR, f"{user_id}.png")
        if not os.path.exists(watermark_path):
            watermark_path = os.path.join(WATERMARK_DIR, f"{user_id}.jpg")

        if not os.path.exists(watermark_path):
            await message.answer(translations["upload_logo_first"][lang])
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏ –ø—É—Ç—å
        if message.photo:
            photo = message.photo[-1]
            file = await bot.get_file(photo.file_id)
            image_path = os.path.join(IMAGE_DIR, f"{user_id}.jpg")
        else:
            document = message.document
            file_ext = document.file_name.split('.')[-1].lower()
            if file_ext not in ["jpg", "jpeg", "png"]:
                await message.answer(translations["unsupported_image_format"][lang])
                return
            file = await bot.get_file(document.file_id)
            image_path = os.path.join(IMAGE_DIR, f"{user_id}.{file_ext}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ
        await bot.download_file(file.file_path, image_path)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        result_path = add_watermark(image_path, watermark_path, watermark_positions.get(user_id, "–ø–æ —Ü–µ–Ω—Ç—Ä—É"), user_id)
        photo_file = FSInputFile(result_path)
        await message.answer_document(photo_file, caption=translations["watermark_added"][lang])


# –§—É–Ω–∫—Ü–∏—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–≥–æ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
def add_watermark(image_path, watermark_path, position_choice, user_id):
    opacity_value = user_opacity.get(user_id, 0.5)  # –£–±–∏—Ä–∞–µ–º str()  # –ë–µ—Ä—ë–º –∑–Ω–∞—á–µ–Ω–∏–µ, 0.5 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    size_value = user_size.get(user_id, 0.2) 

    base_image = Image.open(image_path).convert("RGBA")
    watermark = Image.open(watermark_path).convert("RGBA")

    # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ (20% –æ—Ç —à–∏—Ä–∏–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    base_width, base_height = base_image.size
    wm_width = int(base_width * size_value)
    wm_height = int(watermark.height * (wm_width / watermark.width))
    watermark = watermark.resize((wm_width, wm_height), Image.LANCZOS)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
    alpha = watermark.split()[3]  # –ë–µ—Ä—ë–º –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª
    alpha = alpha.point(lambda p: p * opacity_value)  # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    watermark.putalpha(alpha)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
    positions = {
        "—Å–ª–µ–≤–∞": (10, (base_height - wm_height) // 2),
        "—Å–ø—Ä–∞–≤–∞": (base_width - wm_width - 10, (base_height - wm_height) // 2),
        "–≤–≤–µ—Ä—Ö—É": ((base_width - wm_width) // 2, 10),
        "–≤–Ω–∏–∑—É": ((base_width - wm_width) // 2, base_height - wm_height - 10),
        "–ø–æ —Ü–µ–Ω—Ç—Ä—É": ((base_width - wm_width) // 2, (base_height - wm_height) // 2),
        "—Å–ª–µ–≤–∞ –≤–≤–µ—Ä—Ö—É": (10, 10),
        "—Å–ø—Ä–∞–≤–∞ –≤–≤–µ—Ä—Ö—É": (base_width - wm_width - 10, 10),
        "—Å–ª–µ–≤–∞ –≤–Ω–∏–∑—É": (10, base_height - wm_height - 10),
        "—Å–ø—Ä–∞–≤–∞ –≤–Ω–∏–∑—É": (base_width - wm_width - 10, base_height - wm_height - 10),
    }
    position = positions.get(position_choice, (base_width - wm_width - 10, base_height - wm_height - 10))

    # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫
    transparent = Image.new("RGBA", base_image.size, (0, 0, 0, 0))
    transparent.paste(base_image, (0, 0))
    transparent.paste(watermark, position, mask=watermark)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ PNG (—á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å)
    result_path = image_path.replace(".jpg", "_watermark_master_bot.jpg").replace(".png", "_watermark_master_bot.png")
    transparent.save(result_path, "PNG")

    return result_path


def ping_self():
    while True:
        try:
            response = requests.get("https://395f39e6-f686-4c61-baf4-e970c347044d-00-mpe9dazqkzef.worf.replit.dev:8080/")  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π URL
            print(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] –ü–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω! –ö–æ–¥: {response.status_code}")
        except Exception as e:
            print(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] –û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞: {e}")
        time.sleep(240)  # –ü–∏–Ω–≥–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç


# –ó–∞–ø—É—Å–∫–∞–µ–º Flask –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
keep_alive()

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
t2 = Thread(target=ping_self)
t2.start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
